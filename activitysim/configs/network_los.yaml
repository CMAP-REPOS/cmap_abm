inherit_settings: True

zone_system: 2

skim_dict_factory: NumpyArraySkimFactory
#skim_dict_factory: MemMapSkimFactory

# read cached skims (using numpy memmap) from output directory (memmap is faster than omx )
read_skim_cache: False
# write memmapped cached skims to output directory after reading from omx, for use in subsequent runs
write_skim_cache: True

taz_skims: taz_skims.omx

maz: maz.csv

maz_to_maz:
  tables:
    - maz_to_maz_walk.csv
    - maz_to_maz_bike.csv

  # maz_to_maz blending distance (missing or 0 means no blending)
  max_blend_distance:
    DIST: 5
    # blend distance of 0 means no blending
    DISTBIKE: 0
    DISTWALK: 0

  # missing means use the skim value itself rather than DIST skim (e.g. DISTBIKE)
  blend_distance_skim_name: DIST

skim_time_periods:
    time_window: 1440
    period_minutes: 30
    #Index is 3 AM! 
    periods: [0, 6, 8, 12, 14, 22, 26, 30, 34, 48]
    # TODO old labels: &skim_time_period_labels ['VE', 'EA', 'AM', 'MM', 'MD', 'AF', 'PM', 'EV', 'NT']
    labels: &skim_time_period_labels ['NT', 'EA', 'AM', 'MM', 'MD', 'AF', 'PM', 'EV', 'NT']
    # VE = 3a - 6a (same skim data as NT)
    # EA = 6a - 7a
    # AM = 7a - 9a
    # MM = 9a - 10a
    # MD = 10a - 2p
    # AF = 2p - 4p
    # PM = 4p - 6p
    # EV = 6p - 8p
    # NT = 8p - 3a

demographic_segments: &demographic_segments
  - &low_income_segment_id 0
  - &mid_income_segment_id 1
  - &high_income_segment_id 2

tour_mode_choice:
  CONSTANTS:
    C_LOW_INCOME_SEGMENT_ID: *low_income_segment_id
    C_MID_INCOME_SEGMENT_ID: *mid_income_segment_id 
    C_HIGH_INCOME_SEGMENT_ID: *high_income_segment_id
    demographic_segments_by_income_segment:
      1: *low_income_segment_id
      2: *mid_income_segment_id
      3: *high_income_segment_id
    c_ivt_high_income: -0.035
    c_ivt_mid_income: -0.035
    c_ivt_low_income: -0.035
    c_cost_high_income: -0.0007
    c_cost_mid_income: -0.0028
    c_cost_low_income: -0.0058