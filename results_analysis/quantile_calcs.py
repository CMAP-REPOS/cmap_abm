#!/usr/bin/env python
'''
    quantile_calcs.py
    Author: npeterson
    Revised: 3/15/16
    ---------------------------------------------------------------------------
    A script that compares the change in boardings for transit nodes or lines
    by base boarding quantile from several test ABM objects to a common base.

'''
from abm import *

QUANTILES = 5

# Initialize ABM objects
b = ABM(r'X:\CMAQ_ABM_Models\cmaq_base_20141204', 0.20)

t_nd1 = ABM(r'X:\CMAQ_ABM_Models\cmaq_node_min_20141222', 0.20)
t_nd2 = ABM(r'X:\CMAQ_ABM_Models\cmaq_node_mod_20150109', 0.20)
t_nd3 = ABM(r'X:\CMAQ_ABM_Models\cmaq_node_max_20141215', 0.20)

t_ln1 = ABM(r'X:\CMAQ_ABM_Models\cmaq_line_min_20150105', 0.20)
t_ln2 = ABM(r'X:\CMAQ_ABM_Models\cmaq_line_mod_20150112', 0.20)
t_ln3 = ABM(r'X:\CMAQ_ABM_Models\cmaq_line_max_20141208', 0.20)


def get_boarding_quantiles(boardings, num_quantiles):
    ''' With a dictionary of station/vehicle boardings (generated by
        ABM._get_boardings() as input, return a dictionary with the same
        keys, but where the values are the quantiles in which the boardings
        fall. '''
    # Count frequency of zero-boardings, check if > quantile size
    n_zero = sum((1 for v in boardings.itervalues() if v == 0))
    q_size = len(boardings) / num_quantiles
    special_zero = n_zero > q_size
    brd = boardings.copy() if special_zero else boardings

    if special_zero:
        num_quantiles -= 1  # Do the 0 quantile manually
        boardings_zero = {k: v for k, v in brd.iteritems() if v == 0}
        for k in boardings_zero:
            del brd[k]

    # Sort boarding dict keys/values by node/line id
    sorted_boarding_keys = sorted(brd.keys())
    sorted_boarding_vals = [brd[k] for k in sorted_boarding_keys]

    # Save corresponding quantiles (zero-based) in new list
    sorted_boarding_quantiles = list(pd.qcut(sorted_boarding_vals, num_quantiles).labels)

    # Zip key and quantile lists together into dict
    boarding_quantiles = dict(zip(sorted_boarding_keys, sorted_boarding_quantiles))

    # If 0's handled separately, renumber quantiles and reattach 0's
    if special_zero:
        for k in boarding_quantiles.keys():
            boarding_quantiles[k] += 1
        boarding_quantiles_zero = {k: 0 for k in boardings_zero.keys()}
        boarding_quantiles.update(boarding_quantiles_zero)

    return boarding_quantiles


# Get base boardings and quantiles
boardings_b = {
    'LINE': b._get_boardings('LINE'),
    'NODE': b._get_boardings('NODE')
}

quantiles_b = {
    'LINE': get_boarding_quantiles(boardings_b['LINE'], QUANTILES),
    'NODE': get_boarding_quantiles(boardings_b['NODE'], QUANTILES)
}


# Print base bus boardings
print '\n', b

for node_or_line in sorted(quantiles_b.keys()):
    print node_or_line
    qnt_b = quantiles_b[node_or_line]
    brd_b = boardings_b[node_or_line]

    # Print mean base boardings by quantile
    for i in xrange(QUANTILES):
        n = sum((1 for k in qnt_b.keys() if qnt_b[k] == i))
        mean_base_brd = sum((brd_b[k] for k in qnt_b.keys() if qnt_b[k] == i)) / n if n else 0.
        print 'Q{0} ({1}): {2}'.format(i+1, n, mean_base_brd)

    # Print mean base boardings for all nodes/lines
    n = sum((1 for k in qnt_b.keys()))
    mean_base_brd = sum((brd_b[k] for k in qnt_b.keys())) / n if n else 0.  # Mean of all boardings
    print 'ALL ({0}): {1}\n'.format(n, mean_base_brd)


# Compare test scenario boardings with base, by quantile
def compare_boardings(t, node_or_line, mode=''):
    print '\n', t, mode

    if mode:
        qnt_b = quantiles_b[node_or_line][mode]
        brd_b = boardings_b[node_or_line][mode]
        brd_t = t._get_boardings(node_or_line, split_rail=True)[mode]
    else:
        qnt_b = quantiles_b[node_or_line]
        brd_b = boardings_b[node_or_line]
        brd_t = t._get_boardings(node_or_line, split_rail=False)

    brd_diff = {k: brd_t[k] - brd_b[k] for k in brd_b.keys()}

    # Print mean additional boardings by quantile
    for i in xrange(QUANTILES):
        n = sum((1 for k in qnt_b.keys() if qnt_b[k] == i))
        mean_new_brd = sum((brd_diff[k] for k in qnt_b.keys() if qnt_b[k] == i)) / n if n else 0.
        print 'Q{0} ({1}): {2}'.format(i+1, n, mean_new_brd)

    # Print mean additional boardings for all nodes/lines
    n = sum((1 for k in qnt_b.keys()))
    mean_new_brd = sum((brd_diff[k] for k in qnt_b.keys())) / n if n else 0.  # Mean of all boardings
    print 'ALL ({0}): {1}\n'.format(n, mean_new_brd)

    return brd_t

boardings_t_ln1 = compare_boardings(t_ln1, 'LINE')
boardings_t_ln2 = compare_boardings(t_ln2, 'LINE')
boardings_t_ln3 = compare_boardings(t_ln3, 'LINE')

boardings_t_nd1 = compare_boardings(t_nd1, 'NODE')
boardings_t_nd2 = compare_boardings(t_nd2, 'NODE')
boardings_t_nd3 = compare_boardings(t_nd3, 'NODE')
